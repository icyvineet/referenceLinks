
.       - Any Character Except New Line
\d      - Digit (0-9)
\D      - Not a Digit (0-9)
\w      - Word Character (a-z, A-Z, 0-9, _)
\W      - Not a Word Character
\s      - Whitespace (space, tab, newline)
\S      - Not Whitespace (space, tab, newline)

\b      - Word Boundary
\B      - Not a Word Boundary
^       - Beginning of a String
$       - End of a String

[]      - Matches Characters in brackets
[^ ]    - Matches Characters NOT in brackets
|       - Either Or
( )     - Group

Quantifiers:
*       - 0 or More
+       - 1 or More
?       - 0 or One
{3}     - Exact Number
{3,4}   - Range of Numbers (Minimum, Maximum)


#### Sample Regexs ####

[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+

__________________________________________________________________________________________________________

^[a-zA-Z\\s]*$
where ^ is start of string and $ represents end of string.

You can also extend such regex to check the string size. Let's say if you want allow minimum 5 characters and maximum 20 characters

^[a-zA-Z\\s]{5,20}$
However, because whitespace \\s can be not just space-bar character, but also other charactes, such as new-line, tab, etc., you may want to limit this just to real space-bar characters using

 ^[a-zA-Z ]{5,20}$
Additionaly, you might want to limit multiple space characters to be used in sequence. If so, use

^(?!.* {2,})[a-zA-Z ]{5,20}$`
You might want string always to start and end with non-space characters. To add such feature go with

^(?=.{5,20}$)(?!.* {2,})[a-zA-Z][a-zA-Z ]*[a-zA-Z]$


